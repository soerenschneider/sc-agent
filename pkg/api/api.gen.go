// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ReplicationHttpItemStatus.
const (
	ReplicationHttpItemStatusFailed          ReplicationHttpItemStatus = "failed"
	ReplicationHttpItemStatusInvalidChecksum ReplicationHttpItemStatus = "invalid_checksum"
	ReplicationHttpItemStatusSynced          ReplicationHttpItemStatus = "synced"
	ReplicationHttpItemStatusUnknown         ReplicationHttpItemStatus = "unknown"
)

// Defines values for ReplicationSecretsItemStatus.
const (
	ReplicationSecretsItemStatusFailed  ReplicationSecretsItemStatus = "failed"
	ReplicationSecretsItemStatusSynced  ReplicationSecretsItemStatus = "synced"
	ReplicationSecretsItemStatusUnknown ReplicationSecretsItemStatus = "unknown"
)

// Defines values for CertsSshGetCertificatesParamsType.
const (
	Host CertsSshGetCertificatesParamsType = "host"
	User CertsSshGetCertificatesParamsType = "user"
)

// Defines values for K0sPostActionParamsAction.
const (
	K0sPostActionParamsActionStart K0sPostActionParamsAction = "start"
	K0sPostActionParamsActionStop  K0sPostActionParamsAction = "stop"
)

// Defines values for LibvirtPostDomainActionParamsAction.
const (
	LibvirtPostDomainActionParamsActionReboot   LibvirtPostDomainActionParamsAction = "reboot"
	LibvirtPostDomainActionParamsActionShutdown LibvirtPostDomainActionParamsAction = "shutdown"
	LibvirtPostDomainActionParamsActionStart    LibvirtPostDomainActionParamsAction = "start"
)

// Defines values for PowerPostActionParamsAction.
const (
	Reboot   PowerPostActionParamsAction = "reboot"
	Shutdown PowerPostActionParamsAction = "shutdown"
)

// Defines values for PowerConditionalRebootPostStatusParamsAction.
const (
	Pause   PowerConditionalRebootPostStatusParamsAction = "pause"
	Unpause PowerConditionalRebootPostStatusParamsAction = "unpause"
)

// Defines values for ServicesUnitStatusPutParamsAction.
const (
	Restart ServicesUnitStatusPutParamsAction = "restart"
	Start   ServicesUnitStatusPutParamsAction = "start"
	Stop    ServicesUnitStatusPutParamsAction = "stop"
)

// AcmeManagedCertificate The configuration of the managed ACME certificate
type AcmeManagedCertificate struct {
	// Certificate Returns the x509 certificate data
	Certificate *X509CertificateData `json:"certificate,omitempty"`

	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig   `json:"certificate_config,omitempty"`
	PostHooks         []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig     []X509CertificateStorage `json:"storage_config,omitempty"`
}

// AcmeManagedCertificateList The configuration of all configured managed ACME certificates
type AcmeManagedCertificateList struct {
	// Data The sync items
	Data []AcmeManagedCertificate `json:"data,omitempty"`
}

// InfoComponents Describes which components are enabled on the server
type InfoComponents struct {
	EnabledComponents []string `json:"enabled_components,omitempty"`
}

// PackageInfo Info about a single package
type PackageInfo struct {
	// Name Name of the package
	Name string `json:"name,omitempty"`

	// Repo Repository from which the package was installed
	Repo string `json:"repo,omitempty"`

	// Version Version of the package
	Version string `json:"version,omitempty"`
}

// PackageUpdates Returns whether system updates are available and which packages can be updated
type PackageUpdates struct {
	// UpdatablePackages List of packages that can be updated
	UpdatablePackages []PackageInfo `json:"updatable_packages,omitempty"`

	// UpdatesAvailable Indicates if there are updates available
	UpdatesAvailable bool `json:"updates_available,omitempty"`
}

// PackagesInstalled List of all the installed packages
type PackagesInstalled struct {
	// Packages List of installed packages
	Packages []PackageInfo `json:"packages,omitempty"`
}

// PkiIssuer Information about the certificate's issuer.
type PkiIssuer struct {
	// CommonName The common name of the issuer.
	CommonName string `json:"common_name"`

	// SerialNumber The serial number of the issuer.
	SerialNumber string `json:"serial_number"`
}

// PostHooks Hooks that are run after a cert has been issued
type PostHooks struct {
	// Cmd The command and its args that are run
	Cmd string `json:"cmd,omitempty"`

	// Name The name of the hook
	Name string `json:"name,omitempty"`
}

// Problem A generic HTTP problem
type Problem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code
	Status *int `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type
	Title *string `json:"title,omitempty"`

	// Type A URI reference that identifies the problem type
	Type *string `json:"type,omitempty"`
}

// ReplicationHttpItem Configuration and status of a single HTTP replication item
type ReplicationHttpItem struct {
	// DestUri destination path where the read secret should be writen to
	DestUri string `json:"dest_uri,omitempty"`

	// ExpectedChecksum only save the file if the checksum matches
	ExpectedChecksum *string `json:"expected_checksum,omitempty"`

	// Id id of the item
	Id        string      `json:"id,omitempty"`
	PostHooks []PostHooks `json:"post_hooks,omitempty"`

	// Source path of the secret to read and sync to the local filesystem
	Source string `json:"source,omitempty"`

	// Status the status of the synced secret
	Status ReplicationHttpItemStatus `json:"status,omitempty"`
}

// ReplicationHttpItemStatus the status of the synced secret
type ReplicationHttpItemStatus string

// ReplicationHttpItemsList All managed HTTP replication items
type ReplicationHttpItemsList struct {
	// Data The sync items
	Data []ReplicationHttpItem `json:"data,omitempty"`
}

// ReplicationSecretsItem Configuration and status of a single secret replication item
type ReplicationSecretsItem struct {
	// DestUri destination path where the read secret should be writen to
	DestUri string `json:"dest_uri,omitempty"`

	// Formatter name of the formatter
	Formatter string `json:"formatter,omitempty"`

	// Id id of the item
	Id string `json:"id,omitempty"`

	// SecretPath path of the secret to read and sync to the local filesystem
	SecretPath string `json:"secret_path,omitempty"`

	// Status the status of the synced secret
	Status *ReplicationSecretsItemStatus `json:"status,omitempty"`
}

// ReplicationSecretsItemStatus the status of the synced secret
type ReplicationSecretsItemStatus string

// ReplicationSecretsItemsList The configuration of all configured managed secrets replication items
type ReplicationSecretsItemsList struct {
	// Data The sync items
	Data []ReplicationSecretsItem `json:"data,omitempty"`
}

// ServiceLogs Represents log data. Each entry in the array represents a single line of data.
type ServiceLogs struct {
	Logs []string `json:"logs,omitempty"`
}

// ServiceLogsData Logs data for a service
type ServiceLogsData struct {
	// Data Represents log data. Each entry in the array represents a single line of data.
	Data  *ServiceLogs `json:"data,omitempty"`
	Error *string      `json:"error"`
}

// SshCertificateConfig Represents the configuration of a managed SSH certificate
type SshCertificateConfig struct {
	CertType string `json:"cert_type,omitempty"`

	// CertificateFile The file to write the signed cert to
	CertificateFile string `json:"certificate_file,omitempty"`

	// Id The id of this managed certificate
	Id         string   `json:"id,omitempty"`
	Principals []string `json:"principals,omitempty"`

	// PublicKeyFile The file to read the SSH public key from
	PublicKeyFile string `json:"public_key_file,omitempty"`

	// Role Name of the vault role
	Role string `json:"role,omitempty"`

	// Ttl The desired TTL of the signature
	Ttl string `json:"ttl,omitempty"`
}

// SshCertificateData The actual data of a SSH certificate
type SshCertificateData struct {
	// CriticalOptions A map of critical options associated with the certificate.
	CriticalOptions map[string]string `json:"critical_options,omitempty"`

	// Extensions A map of extensions associated with the certificate.
	Extensions map[string]string `json:"extensions,omitempty"`

	// Percentage Percentage associated with the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Principals List of principals associated with the certificate.
	Principals []string `json:"principals,omitempty"`

	// Serial The serial number of the SSH certificate.
	Serial int64 `json:"serial,omitempty"`

	// Type The type of the certificate.
	Type string `json:"type,omitempty"`

	// ValidAfter The time after which the certificate is valid.
	ValidAfter time.Time `json:"valid_after,omitempty"`

	// ValidBefore The time before which the certificate is valid.
	ValidBefore time.Time `json:"valid_before,omitempty"`
}

// SshCertificateStorage The storage configuration of a managed SSH certificate
type SshCertificateStorage struct {
	// CertificateFile The file that the certificate will be written to
	CertificateFile string `json:"certificate_file,omitempty"`

	// PublicKeyFile The file that contains the public key to be signed
	PublicKeyFile string `json:"public_key_file,omitempty"`
}

// SshManagedCertificate Represents the configuration and storage information of a managed SSH certificate
type SshManagedCertificate struct {
	// Certificate The actual data of a SSH certificate
	Certificate *SshCertificateData `json:"certificate,omitempty"`

	// CertificateConfig Represents the configuration of a managed SSH certificate
	CertificateConfig *SshCertificateConfig `json:"certificate_config,omitempty"`

	// StorageConfig The storage configuration of a managed SSH certificate
	StorageConfig *SshCertificateStorage `json:"storage_config,omitempty"`
}

// SshManagedCertificatesList Returns a list of all the configured managed SSH certificate
type SshManagedCertificatesList struct {
	Data []SshManagedCertificate `json:"data,omitempty"`
}

// X509CertificateConfig Returns the configuration of a managed x509 certificate
type X509CertificateConfig struct {
	// AltNames A list of alternative names (SANs) for the certificate
	AltNames []string `json:"alt_names,omitempty"`

	// CommonName The common name (CN) for the certificate
	CommonName string `json:"common_name,omitempty"`

	// Id Unique identifier for the certificate configuration
	Id string `json:"id,omitempty"`

	// IpSans A list of IP SANs for the certificate
	IpSans []string `json:"ip_sans,omitempty"`

	// Role The role associated with the certificate
	Role string `json:"role,omitempty"`

	// Ttl The time-to-live (TTL) duration for the certificate
	Ttl string `json:"ttl,omitempty"`
}

// X509CertificateData Returns the x509 certificate data
type X509CertificateData struct {
	// EmailAddresses A list of email addresses associated with the certificate.
	EmailAddresses []string `json:"email_addresses,omitempty"`

	// Issuer Information about the certificate's issuer.
	Issuer PkiIssuer `json:"issuer"`

	// NotAfter The end date of the certificate's validity period.
	NotAfter time.Time `json:"not_after"`

	// NotBefore The start date of the certificate's validity period.
	NotBefore time.Time `json:"not_before"`

	// Percentage Lifetime of the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Serial The serial number of the x509 certificate.
	Serial string `json:"serial"`

	// Subject The subject of the certificate.
	Subject string `json:"subject"`
}

// X509CertificateStorage The storage configuration of a managed x509 certificate
type X509CertificateStorage struct {
	// CaFile The file that the ca will be written to
	CaFile string `json:"ca_file,omitempty"`

	// CertFile The file that the cert will be written to
	CertFile string `json:"cert_file,omitempty"`

	// KeyFile The file that the key will be written to
	KeyFile string `json:"key_file,omitempty"`
}

// X509ManagedCertificate Represents the configuration of a managed x509 certificate
type X509ManagedCertificate struct {
	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig `json:"certificate_config,omitempty"`

	// CertificateData Returns the x509 certificate data
	CertificateData *X509CertificateData     `json:"certificate_data,omitempty"`
	PostHooks       []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig   []X509CertificateStorage `json:"storage_config,omitempty"`
}

// X509ManagedCertificateList Returns a list of all the configured managed PKI certificate
type X509ManagedCertificateList struct {
	Data []X509ManagedCertificate `json:"data,omitempty"`
}

// BadRequest A generic HTTP problem
type BadRequest = Problem

// Forbidden A generic HTTP problem
type Forbidden = Problem

// InternalServerError A generic HTTP problem
type InternalServerError = Problem

// NotFound A generic HTTP problem
type NotFound = Problem

// NotImplemented A generic HTTP problem
type NotImplemented = Problem

// Unauthorized A generic HTTP problem
type Unauthorized = Problem

// CertsSshGetCertificatesParams defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParams struct {
	// Type Specifies whether to return cert of type user or host. See Vault documentation.
	Type *CertsSshGetCertificatesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// CertsSshGetCertificatesParamsType defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParamsType string

// CertsSshPostIssueRequestsParams defines parameters for CertsSshPostIssueRequests.
type CertsSshPostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// CertsX509PostIssueRequestsParams defines parameters for CertsX509PostIssueRequests.
type CertsX509PostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// K0sPostActionParams defines parameters for K0sPostAction.
type K0sPostActionParams struct {
	// Action Action to perform for the k0s service
	Action K0sPostActionParamsAction `form:"action" json:"action"`
}

// K0sPostActionParamsAction defines parameters for K0sPostAction.
type K0sPostActionParamsAction string

// LibvirtPostDomainActionParams defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParams struct {
	// Action Action to perform for the libvirt domain
	Action LibvirtPostDomainActionParamsAction `form:"action" json:"action"`
}

// LibvirtPostDomainActionParamsAction defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParamsAction string

// PowerPostActionParams defines parameters for PowerPostAction.
type PowerPostActionParams struct {
	// Action Action to perform for the machine
	Action PowerPostActionParamsAction `form:"action" json:"action"`
}

// PowerPostActionParamsAction defines parameters for PowerPostAction.
type PowerPostActionParamsAction string

// PowerConditionalRebootPostStatusParams defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParams struct {
	// Action Action to perform for the conditional-reboot service
	Action PowerConditionalRebootPostStatusParamsAction `form:"action" json:"action"`
}

// PowerConditionalRebootPostStatusParamsAction defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParamsAction string

// ReplicationPostSecretsRequestsParams defines parameters for ReplicationPostSecretsRequests.
type ReplicationPostSecretsRequestsParams struct {
	// SecretPath The KV2 path of the secret that you want to trigger the sync for
	SecretPath string `form:"secret-path" json:"secret-path"`
}

// ServicesUnitStatusPutParams defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParams struct {
	// Action Action to perform for the system service unit
	Action ServicesUnitStatusPutParamsAction `form:"action" json:"action"`
}

// ServicesUnitStatusPutParamsAction defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParamsAction string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CertsAcmeGetCertificates request
	CertsAcmeGetCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsAcmeGetCertificate request
	CertsAcmeGetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsSshGetCertificates request
	CertsSshGetCertificates(ctx context.Context, params *CertsSshGetCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsSshPostIssueRequests request
	CertsSshPostIssueRequests(ctx context.Context, params *CertsSshPostIssueRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsSshGetCertificate request
	CertsSshGetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsX509GetCertificatesList request
	CertsX509GetCertificatesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsX509PostIssueRequests request
	CertsX509PostIssueRequests(ctx context.Context, params *CertsX509PostIssueRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertsX509GetCertificate request
	CertsX509GetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InfoGetComponents request
	InfoGetComponents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// K0sPostAction request
	K0sPostAction(ctx context.Context, params *K0sPostActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LibvirtPostDomainAction request
	LibvirtPostDomainAction(ctx context.Context, domain string, params *LibvirtPostDomainActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PackagesInstalledGet request
	PackagesInstalledGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PackagesUpdatesGet request
	PackagesUpdatesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PackagesUpgradeRequestsPost request
	PackagesUpgradeRequestsPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PowerPostAction request
	PowerPostAction(ctx context.Context, params *PowerPostActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PowerConditionalRebootPostStatus request
	PowerConditionalRebootPostStatus(ctx context.Context, params *PowerConditionalRebootPostStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PowerConditionalRebootGetStatus request
	PowerConditionalRebootGetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplicationGetHttpItemsList request
	ReplicationGetHttpItemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplicationGetHttpItem request
	ReplicationGetHttpItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplicationGetSecretsItemsList request
	ReplicationGetSecretsItemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplicationGetSecretsItem request
	ReplicationGetSecretsItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplicationPostSecretsRequests request
	ReplicationPostSecretsRequests(ctx context.Context, params *ReplicationPostSecretsRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesUnitLogsGet request
	ServicesUnitLogsGet(ctx context.Context, unit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesUnitStatusPut request
	ServicesUnitStatusPut(ctx context.Context, unit string, params *ServicesUnitStatusPutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WolPostMessage request
	WolPostMessage(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CertsAcmeGetCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsAcmeGetCertificatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsAcmeGetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsAcmeGetCertificateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsSshGetCertificates(ctx context.Context, params *CertsSshGetCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsSshGetCertificatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsSshPostIssueRequests(ctx context.Context, params *CertsSshPostIssueRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsSshPostIssueRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsSshGetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsSshGetCertificateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsX509GetCertificatesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsX509GetCertificatesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsX509PostIssueRequests(ctx context.Context, params *CertsX509PostIssueRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsX509PostIssueRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertsX509GetCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertsX509GetCertificateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InfoGetComponents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInfoGetComponentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) K0sPostAction(ctx context.Context, params *K0sPostActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewK0sPostActionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LibvirtPostDomainAction(ctx context.Context, domain string, params *LibvirtPostDomainActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLibvirtPostDomainActionRequest(c.Server, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PackagesInstalledGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPackagesInstalledGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PackagesUpdatesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPackagesUpdatesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PackagesUpgradeRequestsPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPackagesUpgradeRequestsPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PowerPostAction(ctx context.Context, params *PowerPostActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPowerPostActionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PowerConditionalRebootPostStatus(ctx context.Context, params *PowerConditionalRebootPostStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPowerConditionalRebootPostStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PowerConditionalRebootGetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPowerConditionalRebootGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplicationGetHttpItemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplicationGetHttpItemsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplicationGetHttpItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplicationGetHttpItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplicationGetSecretsItemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplicationGetSecretsItemsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplicationGetSecretsItem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplicationGetSecretsItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplicationPostSecretsRequests(ctx context.Context, params *ReplicationPostSecretsRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplicationPostSecretsRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesUnitLogsGet(ctx context.Context, unit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesUnitLogsGetRequest(c.Server, unit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesUnitStatusPut(ctx context.Context, unit string, params *ServicesUnitStatusPutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesUnitStatusPutRequest(c.Server, unit, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WolPostMessage(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWolPostMessageRequest(c.Server, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCertsAcmeGetCertificatesRequest generates requests for CertsAcmeGetCertificates
func NewCertsAcmeGetCertificatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/acme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsAcmeGetCertificateRequest generates requests for CertsAcmeGetCertificate
func NewCertsAcmeGetCertificateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/acme/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsSshGetCertificatesRequest generates requests for CertsSshGetCertificates
func NewCertsSshGetCertificatesRequest(server string, params *CertsSshGetCertificatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/ssh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsSshPostIssueRequestsRequest generates requests for CertsSshPostIssueRequests
func NewCertsSshPostIssueRequestsRequest(server string, params *CertsSshPostIssueRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/ssh/issue-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ForceRenewal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force-renewal", runtime.ParamLocationQuery, *params.ForceRenewal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsSshGetCertificateRequest generates requests for CertsSshGetCertificate
func NewCertsSshGetCertificateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/ssh/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsX509GetCertificatesListRequest generates requests for CertsX509GetCertificatesList
func NewCertsX509GetCertificatesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/x509")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsX509PostIssueRequestsRequest generates requests for CertsX509PostIssueRequests
func NewCertsX509PostIssueRequestsRequest(server string, params *CertsX509PostIssueRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/x509/issue-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ForceRenewal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force-renewal", runtime.ParamLocationQuery, *params.ForceRenewal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertsX509GetCertificateRequest generates requests for CertsX509GetCertificate
func NewCertsX509GetCertificateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certs/x509/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInfoGetComponentsRequest generates requests for InfoGetComponents
func NewInfoGetComponentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info/components")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewK0sPostActionRequest generates requests for K0sPostAction
func NewK0sPostActionRequest(server string, params *K0sPostActionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/k0s/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLibvirtPostDomainActionRequest generates requests for LibvirtPostDomainAction
func NewLibvirtPostDomainActionRequest(server string, domain string, params *LibvirtPostDomainActionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/libvirt/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPackagesInstalledGetRequest generates requests for PackagesInstalledGet
func NewPackagesInstalledGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/packages/installed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPackagesUpdatesGetRequest generates requests for PackagesUpdatesGet
func NewPackagesUpdatesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/packages/updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPackagesUpgradeRequestsPostRequest generates requests for PackagesUpgradeRequestsPost
func NewPackagesUpgradeRequestsPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/packages/upgrade-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPowerPostActionRequest generates requests for PowerPostAction
func NewPowerPostActionRequest(server string, params *PowerPostActionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/power-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPowerConditionalRebootPostStatusRequest generates requests for PowerConditionalRebootPostStatus
func NewPowerConditionalRebootPostStatusRequest(server string, params *PowerConditionalRebootPostStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/power-state/conditional-reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPowerConditionalRebootGetStatusRequest generates requests for PowerConditionalRebootGetStatus
func NewPowerConditionalRebootGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/power-state/conditional-reboot/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplicationGetHttpItemsListRequest generates requests for ReplicationGetHttpItemsList
func NewReplicationGetHttpItemsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/replication/http/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplicationGetHttpItemRequest generates requests for ReplicationGetHttpItem
func NewReplicationGetHttpItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/replication/http/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplicationGetSecretsItemsListRequest generates requests for ReplicationGetSecretsItemsList
func NewReplicationGetSecretsItemsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/replication/secrets/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplicationGetSecretsItemRequest generates requests for ReplicationGetSecretsItem
func NewReplicationGetSecretsItemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/replication/secrets/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplicationPostSecretsRequestsRequest generates requests for ReplicationPostSecretsRequests
func NewReplicationPostSecretsRequestsRequest(server string, params *ReplicationPostSecretsRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/replication/secrets/sync-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret-path", runtime.ParamLocationQuery, params.SecretPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesUnitLogsGetRequest generates requests for ServicesUnitLogsGet
func NewServicesUnitLogsGetRequest(server string, unit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "unit", runtime.ParamLocationPath, unit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesUnitStatusPutRequest generates requests for ServicesUnitStatusPut
func NewServicesUnitStatusPutRequest(server string, unit string, params *ServicesUnitStatusPutParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "unit", runtime.ParamLocationPath, unit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWolPostMessageRequest generates requests for WolPostMessage
func NewWolPostMessageRequest(server string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/wol-message/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CertsAcmeGetCertificatesWithResponse request
	CertsAcmeGetCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CertsAcmeGetCertificatesResponse, error)

	// CertsAcmeGetCertificateWithResponse request
	CertsAcmeGetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsAcmeGetCertificateResponse, error)

	// CertsSshGetCertificatesWithResponse request
	CertsSshGetCertificatesWithResponse(ctx context.Context, params *CertsSshGetCertificatesParams, reqEditors ...RequestEditorFn) (*CertsSshGetCertificatesResponse, error)

	// CertsSshPostIssueRequestsWithResponse request
	CertsSshPostIssueRequestsWithResponse(ctx context.Context, params *CertsSshPostIssueRequestsParams, reqEditors ...RequestEditorFn) (*CertsSshPostIssueRequestsResponse, error)

	// CertsSshGetCertificateWithResponse request
	CertsSshGetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsSshGetCertificateResponse, error)

	// CertsX509GetCertificatesListWithResponse request
	CertsX509GetCertificatesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CertsX509GetCertificatesListResponse, error)

	// CertsX509PostIssueRequestsWithResponse request
	CertsX509PostIssueRequestsWithResponse(ctx context.Context, params *CertsX509PostIssueRequestsParams, reqEditors ...RequestEditorFn) (*CertsX509PostIssueRequestsResponse, error)

	// CertsX509GetCertificateWithResponse request
	CertsX509GetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsX509GetCertificateResponse, error)

	// InfoGetComponentsWithResponse request
	InfoGetComponentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InfoGetComponentsResponse, error)

	// K0sPostActionWithResponse request
	K0sPostActionWithResponse(ctx context.Context, params *K0sPostActionParams, reqEditors ...RequestEditorFn) (*K0sPostActionResponse, error)

	// LibvirtPostDomainActionWithResponse request
	LibvirtPostDomainActionWithResponse(ctx context.Context, domain string, params *LibvirtPostDomainActionParams, reqEditors ...RequestEditorFn) (*LibvirtPostDomainActionResponse, error)

	// PackagesInstalledGetWithResponse request
	PackagesInstalledGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesInstalledGetResponse, error)

	// PackagesUpdatesGetWithResponse request
	PackagesUpdatesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesUpdatesGetResponse, error)

	// PackagesUpgradeRequestsPostWithResponse request
	PackagesUpgradeRequestsPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesUpgradeRequestsPostResponse, error)

	// PowerPostActionWithResponse request
	PowerPostActionWithResponse(ctx context.Context, params *PowerPostActionParams, reqEditors ...RequestEditorFn) (*PowerPostActionResponse, error)

	// PowerConditionalRebootPostStatusWithResponse request
	PowerConditionalRebootPostStatusWithResponse(ctx context.Context, params *PowerConditionalRebootPostStatusParams, reqEditors ...RequestEditorFn) (*PowerConditionalRebootPostStatusResponse, error)

	// PowerConditionalRebootGetStatusWithResponse request
	PowerConditionalRebootGetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PowerConditionalRebootGetStatusResponse, error)

	// ReplicationGetHttpItemsListWithResponse request
	ReplicationGetHttpItemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplicationGetHttpItemsListResponse, error)

	// ReplicationGetHttpItemWithResponse request
	ReplicationGetHttpItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReplicationGetHttpItemResponse, error)

	// ReplicationGetSecretsItemsListWithResponse request
	ReplicationGetSecretsItemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplicationGetSecretsItemsListResponse, error)

	// ReplicationGetSecretsItemWithResponse request
	ReplicationGetSecretsItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReplicationGetSecretsItemResponse, error)

	// ReplicationPostSecretsRequestsWithResponse request
	ReplicationPostSecretsRequestsWithResponse(ctx context.Context, params *ReplicationPostSecretsRequestsParams, reqEditors ...RequestEditorFn) (*ReplicationPostSecretsRequestsResponse, error)

	// ServicesUnitLogsGetWithResponse request
	ServicesUnitLogsGetWithResponse(ctx context.Context, unit string, reqEditors ...RequestEditorFn) (*ServicesUnitLogsGetResponse, error)

	// ServicesUnitStatusPutWithResponse request
	ServicesUnitStatusPutWithResponse(ctx context.Context, unit string, params *ServicesUnitStatusPutParams, reqEditors ...RequestEditorFn) (*ServicesUnitStatusPutResponse, error)

	// WolPostMessageWithResponse request
	WolPostMessageWithResponse(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*WolPostMessageResponse, error)
}

type CertsAcmeGetCertificatesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AcmeManagedCertificateList
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsAcmeGetCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsAcmeGetCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsAcmeGetCertificateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AcmeManagedCertificate
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsAcmeGetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsAcmeGetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsSshGetCertificatesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]SshManagedCertificatesList
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsSshGetCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsSshGetCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsSshPostIssueRequestsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsSshPostIssueRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsSshPostIssueRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsSshGetCertificateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SshManagedCertificate
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsSshGetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsSshGetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsX509GetCertificatesListResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]X509ManagedCertificateList
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsX509GetCertificatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsX509GetCertificatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsX509PostIssueRequestsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsX509PostIssueRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsX509PostIssueRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertsX509GetCertificateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *X509ManagedCertificate
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r CertsX509GetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertsX509GetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InfoGetComponentsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *InfoComponents
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r InfoGetComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InfoGetComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type K0sPostActionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r K0sPostActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r K0sPostActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LibvirtPostDomainActionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r LibvirtPostDomainActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LibvirtPostDomainActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PackagesInstalledGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PackagesInstalled
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PackagesInstalledGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PackagesInstalledGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PackagesUpdatesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PackageUpdates
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PackagesUpdatesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PackagesUpdatesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PackagesUpgradeRequestsPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PackagesUpgradeRequestsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PackagesUpgradeRequestsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PowerPostActionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PowerPostActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PowerPostActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PowerConditionalRebootPostStatusResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PowerConditionalRebootPostStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PowerConditionalRebootPostStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PowerConditionalRebootGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r PowerConditionalRebootGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PowerConditionalRebootGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplicationGetHttpItemsListResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ReplicationHttpItemsList
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ReplicationGetHttpItemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplicationGetHttpItemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplicationGetHttpItemResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ReplicationHttpItem
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ReplicationGetHttpItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplicationGetHttpItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplicationGetSecretsItemsListResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ReplicationSecretsItemsList
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ReplicationGetSecretsItemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplicationGetSecretsItemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplicationGetSecretsItemResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ReplicationSecretsItem
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ReplicationGetSecretsItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplicationGetSecretsItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplicationPostSecretsRequestsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ReplicationPostSecretsRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplicationPostSecretsRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesUnitLogsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ServiceLogsData
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON401 *Unauthorized
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ServicesUnitLogsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesUnitLogsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesUnitStatusPutResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r ServicesUnitStatusPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesUnitStatusPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WolPostMessageResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON500 *InternalServerError
	ApplicationproblemJSON501 *NotImplemented
}

// Status returns HTTPResponse.Status
func (r WolPostMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WolPostMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CertsAcmeGetCertificatesWithResponse request returning *CertsAcmeGetCertificatesResponse
func (c *ClientWithResponses) CertsAcmeGetCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CertsAcmeGetCertificatesResponse, error) {
	rsp, err := c.CertsAcmeGetCertificates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsAcmeGetCertificatesResponse(rsp)
}

// CertsAcmeGetCertificateWithResponse request returning *CertsAcmeGetCertificateResponse
func (c *ClientWithResponses) CertsAcmeGetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsAcmeGetCertificateResponse, error) {
	rsp, err := c.CertsAcmeGetCertificate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsAcmeGetCertificateResponse(rsp)
}

// CertsSshGetCertificatesWithResponse request returning *CertsSshGetCertificatesResponse
func (c *ClientWithResponses) CertsSshGetCertificatesWithResponse(ctx context.Context, params *CertsSshGetCertificatesParams, reqEditors ...RequestEditorFn) (*CertsSshGetCertificatesResponse, error) {
	rsp, err := c.CertsSshGetCertificates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsSshGetCertificatesResponse(rsp)
}

// CertsSshPostIssueRequestsWithResponse request returning *CertsSshPostIssueRequestsResponse
func (c *ClientWithResponses) CertsSshPostIssueRequestsWithResponse(ctx context.Context, params *CertsSshPostIssueRequestsParams, reqEditors ...RequestEditorFn) (*CertsSshPostIssueRequestsResponse, error) {
	rsp, err := c.CertsSshPostIssueRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsSshPostIssueRequestsResponse(rsp)
}

// CertsSshGetCertificateWithResponse request returning *CertsSshGetCertificateResponse
func (c *ClientWithResponses) CertsSshGetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsSshGetCertificateResponse, error) {
	rsp, err := c.CertsSshGetCertificate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsSshGetCertificateResponse(rsp)
}

// CertsX509GetCertificatesListWithResponse request returning *CertsX509GetCertificatesListResponse
func (c *ClientWithResponses) CertsX509GetCertificatesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CertsX509GetCertificatesListResponse, error) {
	rsp, err := c.CertsX509GetCertificatesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsX509GetCertificatesListResponse(rsp)
}

// CertsX509PostIssueRequestsWithResponse request returning *CertsX509PostIssueRequestsResponse
func (c *ClientWithResponses) CertsX509PostIssueRequestsWithResponse(ctx context.Context, params *CertsX509PostIssueRequestsParams, reqEditors ...RequestEditorFn) (*CertsX509PostIssueRequestsResponse, error) {
	rsp, err := c.CertsX509PostIssueRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsX509PostIssueRequestsResponse(rsp)
}

// CertsX509GetCertificateWithResponse request returning *CertsX509GetCertificateResponse
func (c *ClientWithResponses) CertsX509GetCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertsX509GetCertificateResponse, error) {
	rsp, err := c.CertsX509GetCertificate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertsX509GetCertificateResponse(rsp)
}

// InfoGetComponentsWithResponse request returning *InfoGetComponentsResponse
func (c *ClientWithResponses) InfoGetComponentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*InfoGetComponentsResponse, error) {
	rsp, err := c.InfoGetComponents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInfoGetComponentsResponse(rsp)
}

// K0sPostActionWithResponse request returning *K0sPostActionResponse
func (c *ClientWithResponses) K0sPostActionWithResponse(ctx context.Context, params *K0sPostActionParams, reqEditors ...RequestEditorFn) (*K0sPostActionResponse, error) {
	rsp, err := c.K0sPostAction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseK0sPostActionResponse(rsp)
}

// LibvirtPostDomainActionWithResponse request returning *LibvirtPostDomainActionResponse
func (c *ClientWithResponses) LibvirtPostDomainActionWithResponse(ctx context.Context, domain string, params *LibvirtPostDomainActionParams, reqEditors ...RequestEditorFn) (*LibvirtPostDomainActionResponse, error) {
	rsp, err := c.LibvirtPostDomainAction(ctx, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLibvirtPostDomainActionResponse(rsp)
}

// PackagesInstalledGetWithResponse request returning *PackagesInstalledGetResponse
func (c *ClientWithResponses) PackagesInstalledGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesInstalledGetResponse, error) {
	rsp, err := c.PackagesInstalledGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePackagesInstalledGetResponse(rsp)
}

// PackagesUpdatesGetWithResponse request returning *PackagesUpdatesGetResponse
func (c *ClientWithResponses) PackagesUpdatesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesUpdatesGetResponse, error) {
	rsp, err := c.PackagesUpdatesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePackagesUpdatesGetResponse(rsp)
}

// PackagesUpgradeRequestsPostWithResponse request returning *PackagesUpgradeRequestsPostResponse
func (c *ClientWithResponses) PackagesUpgradeRequestsPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PackagesUpgradeRequestsPostResponse, error) {
	rsp, err := c.PackagesUpgradeRequestsPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePackagesUpgradeRequestsPostResponse(rsp)
}

// PowerPostActionWithResponse request returning *PowerPostActionResponse
func (c *ClientWithResponses) PowerPostActionWithResponse(ctx context.Context, params *PowerPostActionParams, reqEditors ...RequestEditorFn) (*PowerPostActionResponse, error) {
	rsp, err := c.PowerPostAction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePowerPostActionResponse(rsp)
}

// PowerConditionalRebootPostStatusWithResponse request returning *PowerConditionalRebootPostStatusResponse
func (c *ClientWithResponses) PowerConditionalRebootPostStatusWithResponse(ctx context.Context, params *PowerConditionalRebootPostStatusParams, reqEditors ...RequestEditorFn) (*PowerConditionalRebootPostStatusResponse, error) {
	rsp, err := c.PowerConditionalRebootPostStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePowerConditionalRebootPostStatusResponse(rsp)
}

// PowerConditionalRebootGetStatusWithResponse request returning *PowerConditionalRebootGetStatusResponse
func (c *ClientWithResponses) PowerConditionalRebootGetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PowerConditionalRebootGetStatusResponse, error) {
	rsp, err := c.PowerConditionalRebootGetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePowerConditionalRebootGetStatusResponse(rsp)
}

// ReplicationGetHttpItemsListWithResponse request returning *ReplicationGetHttpItemsListResponse
func (c *ClientWithResponses) ReplicationGetHttpItemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplicationGetHttpItemsListResponse, error) {
	rsp, err := c.ReplicationGetHttpItemsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplicationGetHttpItemsListResponse(rsp)
}

// ReplicationGetHttpItemWithResponse request returning *ReplicationGetHttpItemResponse
func (c *ClientWithResponses) ReplicationGetHttpItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReplicationGetHttpItemResponse, error) {
	rsp, err := c.ReplicationGetHttpItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplicationGetHttpItemResponse(rsp)
}

// ReplicationGetSecretsItemsListWithResponse request returning *ReplicationGetSecretsItemsListResponse
func (c *ClientWithResponses) ReplicationGetSecretsItemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReplicationGetSecretsItemsListResponse, error) {
	rsp, err := c.ReplicationGetSecretsItemsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplicationGetSecretsItemsListResponse(rsp)
}

// ReplicationGetSecretsItemWithResponse request returning *ReplicationGetSecretsItemResponse
func (c *ClientWithResponses) ReplicationGetSecretsItemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReplicationGetSecretsItemResponse, error) {
	rsp, err := c.ReplicationGetSecretsItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplicationGetSecretsItemResponse(rsp)
}

// ReplicationPostSecretsRequestsWithResponse request returning *ReplicationPostSecretsRequestsResponse
func (c *ClientWithResponses) ReplicationPostSecretsRequestsWithResponse(ctx context.Context, params *ReplicationPostSecretsRequestsParams, reqEditors ...RequestEditorFn) (*ReplicationPostSecretsRequestsResponse, error) {
	rsp, err := c.ReplicationPostSecretsRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplicationPostSecretsRequestsResponse(rsp)
}

// ServicesUnitLogsGetWithResponse request returning *ServicesUnitLogsGetResponse
func (c *ClientWithResponses) ServicesUnitLogsGetWithResponse(ctx context.Context, unit string, reqEditors ...RequestEditorFn) (*ServicesUnitLogsGetResponse, error) {
	rsp, err := c.ServicesUnitLogsGet(ctx, unit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesUnitLogsGetResponse(rsp)
}

// ServicesUnitStatusPutWithResponse request returning *ServicesUnitStatusPutResponse
func (c *ClientWithResponses) ServicesUnitStatusPutWithResponse(ctx context.Context, unit string, params *ServicesUnitStatusPutParams, reqEditors ...RequestEditorFn) (*ServicesUnitStatusPutResponse, error) {
	rsp, err := c.ServicesUnitStatusPut(ctx, unit, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesUnitStatusPutResponse(rsp)
}

// WolPostMessageWithResponse request returning *WolPostMessageResponse
func (c *ClientWithResponses) WolPostMessageWithResponse(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*WolPostMessageResponse, error) {
	rsp, err := c.WolPostMessage(ctx, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWolPostMessageResponse(rsp)
}

// ParseCertsAcmeGetCertificatesResponse parses an HTTP response from a CertsAcmeGetCertificatesWithResponse call
func ParseCertsAcmeGetCertificatesResponse(rsp *http.Response) (*CertsAcmeGetCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsAcmeGetCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcmeManagedCertificateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsAcmeGetCertificateResponse parses an HTTP response from a CertsAcmeGetCertificateWithResponse call
func ParseCertsAcmeGetCertificateResponse(rsp *http.Response) (*CertsAcmeGetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsAcmeGetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AcmeManagedCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsSshGetCertificatesResponse parses an HTTP response from a CertsSshGetCertificatesWithResponse call
func ParseCertsSshGetCertificatesResponse(rsp *http.Response) (*CertsSshGetCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsSshGetCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SshManagedCertificatesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsSshPostIssueRequestsResponse parses an HTTP response from a CertsSshPostIssueRequestsWithResponse call
func ParseCertsSshPostIssueRequestsResponse(rsp *http.Response) (*CertsSshPostIssueRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsSshPostIssueRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsSshGetCertificateResponse parses an HTTP response from a CertsSshGetCertificateWithResponse call
func ParseCertsSshGetCertificateResponse(rsp *http.Response) (*CertsSshGetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsSshGetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SshManagedCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsX509GetCertificatesListResponse parses an HTTP response from a CertsX509GetCertificatesListWithResponse call
func ParseCertsX509GetCertificatesListResponse(rsp *http.Response) (*CertsX509GetCertificatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsX509GetCertificatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []X509ManagedCertificateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsX509PostIssueRequestsResponse parses an HTTP response from a CertsX509PostIssueRequestsWithResponse call
func ParseCertsX509PostIssueRequestsResponse(rsp *http.Response) (*CertsX509PostIssueRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsX509PostIssueRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseCertsX509GetCertificateResponse parses an HTTP response from a CertsX509GetCertificateWithResponse call
func ParseCertsX509GetCertificateResponse(rsp *http.Response) (*CertsX509GetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertsX509GetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest X509ManagedCertificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseInfoGetComponentsResponse parses an HTTP response from a InfoGetComponentsWithResponse call
func ParseInfoGetComponentsResponse(rsp *http.Response) (*InfoGetComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InfoGetComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InfoComponents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseK0sPostActionResponse parses an HTTP response from a K0sPostActionWithResponse call
func ParseK0sPostActionResponse(rsp *http.Response) (*K0sPostActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &K0sPostActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseLibvirtPostDomainActionResponse parses an HTTP response from a LibvirtPostDomainActionWithResponse call
func ParseLibvirtPostDomainActionResponse(rsp *http.Response) (*LibvirtPostDomainActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LibvirtPostDomainActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePackagesInstalledGetResponse parses an HTTP response from a PackagesInstalledGetWithResponse call
func ParsePackagesInstalledGetResponse(rsp *http.Response) (*PackagesInstalledGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PackagesInstalledGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackagesInstalled
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePackagesUpdatesGetResponse parses an HTTP response from a PackagesUpdatesGetWithResponse call
func ParsePackagesUpdatesGetResponse(rsp *http.Response) (*PackagesUpdatesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PackagesUpdatesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageUpdates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePackagesUpgradeRequestsPostResponse parses an HTTP response from a PackagesUpgradeRequestsPostWithResponse call
func ParsePackagesUpgradeRequestsPostResponse(rsp *http.Response) (*PackagesUpgradeRequestsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PackagesUpgradeRequestsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePowerPostActionResponse parses an HTTP response from a PowerPostActionWithResponse call
func ParsePowerPostActionResponse(rsp *http.Response) (*PowerPostActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PowerPostActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePowerConditionalRebootPostStatusResponse parses an HTTP response from a PowerConditionalRebootPostStatusWithResponse call
func ParsePowerConditionalRebootPostStatusResponse(rsp *http.Response) (*PowerConditionalRebootPostStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PowerConditionalRebootPostStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParsePowerConditionalRebootGetStatusResponse parses an HTTP response from a PowerConditionalRebootGetStatusWithResponse call
func ParsePowerConditionalRebootGetStatusResponse(rsp *http.Response) (*PowerConditionalRebootGetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PowerConditionalRebootGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseReplicationGetHttpItemsListResponse parses an HTTP response from a ReplicationGetHttpItemsListWithResponse call
func ParseReplicationGetHttpItemsListResponse(rsp *http.Response) (*ReplicationGetHttpItemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplicationGetHttpItemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationHttpItemsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseReplicationGetHttpItemResponse parses an HTTP response from a ReplicationGetHttpItemWithResponse call
func ParseReplicationGetHttpItemResponse(rsp *http.Response) (*ReplicationGetHttpItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplicationGetHttpItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationHttpItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseReplicationGetSecretsItemsListResponse parses an HTTP response from a ReplicationGetSecretsItemsListWithResponse call
func ParseReplicationGetSecretsItemsListResponse(rsp *http.Response) (*ReplicationGetSecretsItemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplicationGetSecretsItemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationSecretsItemsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseReplicationGetSecretsItemResponse parses an HTTP response from a ReplicationGetSecretsItemWithResponse call
func ParseReplicationGetSecretsItemResponse(rsp *http.Response) (*ReplicationGetSecretsItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplicationGetSecretsItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationSecretsItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseReplicationPostSecretsRequestsResponse parses an HTTP response from a ReplicationPostSecretsRequestsWithResponse call
func ParseReplicationPostSecretsRequestsResponse(rsp *http.Response) (*ReplicationPostSecretsRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplicationPostSecretsRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseServicesUnitLogsGetResponse parses an HTTP response from a ServicesUnitLogsGetWithResponse call
func ParseServicesUnitLogsGetResponse(rsp *http.Response) (*ServicesUnitLogsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesUnitLogsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceLogsData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 401:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseServicesUnitStatusPutResponse parses an HTTP response from a ServicesUnitStatusPutWithResponse call
func ParseServicesUnitStatusPutResponse(rsp *http.Response) (*ServicesUnitStatusPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesUnitStatusPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// ParseWolPostMessageResponse parses an HTTP response from a WolPostMessageWithResponse call
func ParseWolPostMessageResponse(rsp *http.Response) (*WolPostMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WolPostMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case rsp.StatusCode == 400:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 403:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 500:
	// Content-type (application/problem+xml) unsupported

	case rsp.StatusCode == 501:
		// Content-type (application/problem+xml) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PJwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

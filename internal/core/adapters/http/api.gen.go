//go:build go1.22

// Package http_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package http_server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ReplicationHttpItemStatus.
const (
	ReplicationHttpItemStatusFailed          ReplicationHttpItemStatus = "failed"
	ReplicationHttpItemStatusInvalidChecksum ReplicationHttpItemStatus = "invalid_checksum"
	ReplicationHttpItemStatusSynced          ReplicationHttpItemStatus = "synced"
	ReplicationHttpItemStatusUnknown         ReplicationHttpItemStatus = "unknown"
)

// Defines values for ReplicationSecretsItemStatus.
const (
	ReplicationSecretsItemStatusFailed  ReplicationSecretsItemStatus = "failed"
	ReplicationSecretsItemStatusSynced  ReplicationSecretsItemStatus = "synced"
	ReplicationSecretsItemStatusUnknown ReplicationSecretsItemStatus = "unknown"
)

// Defines values for CertsSshGetCertificatesParamsType.
const (
	Host CertsSshGetCertificatesParamsType = "host"
	User CertsSshGetCertificatesParamsType = "user"
)

// Defines values for K0sPostActionParamsAction.
const (
	K0sPostActionParamsActionStart K0sPostActionParamsAction = "start"
	K0sPostActionParamsActionStop  K0sPostActionParamsAction = "stop"
)

// Defines values for LibvirtPostDomainActionParamsAction.
const (
	LibvirtPostDomainActionParamsActionReboot   LibvirtPostDomainActionParamsAction = "reboot"
	LibvirtPostDomainActionParamsActionShutdown LibvirtPostDomainActionParamsAction = "shutdown"
	LibvirtPostDomainActionParamsActionStart    LibvirtPostDomainActionParamsAction = "start"
)

// Defines values for PowerPostActionParamsAction.
const (
	Reboot   PowerPostActionParamsAction = "reboot"
	Shutdown PowerPostActionParamsAction = "shutdown"
)

// Defines values for PowerConditionalRebootPostStatusParamsAction.
const (
	Pause   PowerConditionalRebootPostStatusParamsAction = "pause"
	Unpause PowerConditionalRebootPostStatusParamsAction = "unpause"
)

// Defines values for ServicesUnitStatusPutParamsAction.
const (
	Restart ServicesUnitStatusPutParamsAction = "restart"
	Start   ServicesUnitStatusPutParamsAction = "start"
	Stop    ServicesUnitStatusPutParamsAction = "stop"
)

// AcmeManagedCertificate The configuration of the managed ACME certificate
type AcmeManagedCertificate struct {
	// Certificate Returns the x509 certificate data
	Certificate *X509CertificateData `json:"certificate,omitempty"`

	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig   `json:"certificate_config,omitempty"`
	PostHooks         []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig     []X509CertificateStorage `json:"storage_config,omitempty"`
}

// AcmeManagedCertificateList The configuration of all configured managed ACME certificates
type AcmeManagedCertificateList struct {
	// Data The sync items
	Data []AcmeManagedCertificate `json:"data,omitempty"`
}

// InfoComponents Describes which components are enabled on the server
type InfoComponents struct {
	EnabledComponents []string `json:"enabled_components,omitempty"`
}

// PackageInfo Info about a single package
type PackageInfo struct {
	// Name Name of the package
	Name string `json:"name,omitempty"`

	// Repo Repository from which the package was installed
	Repo string `json:"repo,omitempty"`

	// Version Version of the package
	Version string `json:"version,omitempty"`
}

// PackageUpdates Returns whether system updates are available and which packages can be updated
type PackageUpdates struct {
	// UpdatablePackages List of packages that can be updated
	UpdatablePackages []PackageInfo `json:"updatable_packages,omitempty"`

	// UpdatesAvailable Indicates if there are updates available
	UpdatesAvailable bool `json:"updates_available,omitempty"`
}

// PackagesInstalled List of all the installed packages
type PackagesInstalled struct {
	// Packages List of installed packages
	Packages []PackageInfo `json:"packages,omitempty"`
}

// PkiIssuer Information about the certificate's issuer.
type PkiIssuer struct {
	// CommonName The common name of the issuer.
	CommonName string `json:"common_name"`

	// SerialNumber The serial number of the issuer.
	SerialNumber string `json:"serial_number"`
}

// PostHooks Hooks that are run after a cert has been issued
type PostHooks struct {
	// Cmd The command and its args that are run
	Cmd string `json:"cmd,omitempty"`

	// Name The name of the hook
	Name string `json:"name,omitempty"`
}

// Problem A generic HTTP problem
type Problem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code
	Status *int `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type
	Title *string `json:"title,omitempty"`

	// Type A URI reference that identifies the problem type
	Type *string `json:"type,omitempty"`
}

// ReplicationHttpItem Configuration and status of a single HTTP replication item
type ReplicationHttpItem struct {
	// DestUris destination path where the read secret should be writen to
	DestUris []string `json:"dest_uris,omitempty"`

	// ExpectedChecksum only save the file if the checksum matches
	ExpectedChecksum *string `json:"expected_checksum,omitempty"`

	// Id id of the item
	Id        string      `json:"id,omitempty"`
	PostHooks []PostHooks `json:"post_hooks,omitempty"`

	// Source path of the secret to read and sync to the local filesystem
	Source string `json:"source,omitempty"`

	// Status the status of the synced secret
	Status ReplicationHttpItemStatus `json:"status,omitempty"`
}

// ReplicationHttpItemStatus the status of the synced secret
type ReplicationHttpItemStatus string

// ReplicationHttpItemsList All managed HTTP replication items
type ReplicationHttpItemsList struct {
	// Data The sync items
	Data []ReplicationHttpItem `json:"data,omitempty"`
}

// ReplicationSecretsItem Configuration and status of a single secret replication item
type ReplicationSecretsItem struct {
	// DestUri destination path where the read secret should be writen to
	DestUri string `json:"dest_uri,omitempty"`

	// Formatter name of the formatter
	Formatter string `json:"formatter,omitempty"`

	// Id id of the item
	Id string `json:"id,omitempty"`

	// SecretPath path of the secret to read and sync to the local filesystem
	SecretPath string `json:"secret_path,omitempty"`

	// Status the status of the synced secret
	Status *ReplicationSecretsItemStatus `json:"status,omitempty"`
}

// ReplicationSecretsItemStatus the status of the synced secret
type ReplicationSecretsItemStatus string

// ReplicationSecretsItemsList The configuration of all configured managed secrets replication items
type ReplicationSecretsItemsList struct {
	// Data The sync items
	Data []ReplicationSecretsItem `json:"data,omitempty"`
}

// ServiceLogs Represents log data. Each entry in the array represents a single line of data.
type ServiceLogs struct {
	Logs []string `json:"logs,omitempty"`
}

// ServiceLogsData Logs data for a service
type ServiceLogsData struct {
	// Data Represents log data. Each entry in the array represents a single line of data.
	Data  *ServiceLogs `json:"data,omitempty"`
	Error *string      `json:"error"`
}

// SshCertificateConfig Represents the configuration of a managed SSH certificate
type SshCertificateConfig struct {
	CertType string `json:"cert_type,omitempty"`

	// CertificateFile The file to write the signed cert to
	CertificateFile string `json:"certificate_file,omitempty"`

	// Id The id of this managed certificate
	Id         string   `json:"id,omitempty"`
	Principals []string `json:"principals,omitempty"`

	// PublicKeyFile The file to read the SSH public key from
	PublicKeyFile string `json:"public_key_file,omitempty"`

	// Role Name of the vault role
	Role string `json:"role,omitempty"`

	// Ttl The desired TTL of the signature
	Ttl string `json:"ttl,omitempty"`
}

// SshCertificateData The actual data of a SSH certificate
type SshCertificateData struct {
	// CriticalOptions A map of critical options associated with the certificate.
	CriticalOptions map[string]string `json:"critical_options,omitempty"`

	// Extensions A map of extensions associated with the certificate.
	Extensions map[string]string `json:"extensions,omitempty"`

	// Percentage Percentage associated with the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Principals List of principals associated with the certificate.
	Principals []string `json:"principals,omitempty"`

	// Serial The serial number of the SSH certificate.
	Serial int64 `json:"serial,omitempty"`

	// Type The type of the certificate.
	Type string `json:"type,omitempty"`

	// ValidAfter The time after which the certificate is valid.
	ValidAfter time.Time `json:"valid_after,omitempty"`

	// ValidBefore The time before which the certificate is valid.
	ValidBefore time.Time `json:"valid_before,omitempty"`
}

// SshCertificateStorage The storage configuration of a managed SSH certificate
type SshCertificateStorage struct {
	// CertificateFile The file that the certificate will be written to
	CertificateFile string `json:"certificate_file,omitempty"`

	// PublicKeyFile The file that contains the public key to be signed
	PublicKeyFile string `json:"public_key_file,omitempty"`
}

// SshManagedCertificate Represents the configuration and storage information of a managed SSH certificate
type SshManagedCertificate struct {
	// Certificate The actual data of a SSH certificate
	Certificate *SshCertificateData `json:"certificate,omitempty"`

	// CertificateConfig Represents the configuration of a managed SSH certificate
	CertificateConfig *SshCertificateConfig `json:"certificate_config,omitempty"`

	// StorageConfig The storage configuration of a managed SSH certificate
	StorageConfig *SshCertificateStorage `json:"storage_config,omitempty"`
}

// SshManagedCertificatesList Returns a list of all the configured managed SSH certificate
type SshManagedCertificatesList struct {
	Data []SshManagedCertificate `json:"data,omitempty"`
}

// X509CertificateConfig Returns the configuration of a managed x509 certificate
type X509CertificateConfig struct {
	// AltNames A list of alternative names (SANs) for the certificate
	AltNames []string `json:"alt_names,omitempty"`

	// CommonName The common name (CN) for the certificate
	CommonName string `json:"common_name,omitempty"`

	// Id Unique identifier for the certificate configuration
	Id string `json:"id,omitempty"`

	// IpSans A list of IP SANs for the certificate
	IpSans []string `json:"ip_sans,omitempty"`

	// Role The role associated with the certificate
	Role string `json:"role,omitempty"`

	// Ttl The time-to-live (TTL) duration for the certificate
	Ttl string `json:"ttl,omitempty"`
}

// X509CertificateData Returns the x509 certificate data
type X509CertificateData struct {
	// EmailAddresses A list of email addresses associated with the certificate.
	EmailAddresses []string `json:"email_addresses,omitempty"`

	// Issuer Information about the certificate's issuer.
	Issuer PkiIssuer `json:"issuer"`

	// NotAfter The end date of the certificate's validity period.
	NotAfter time.Time `json:"not_after"`

	// NotBefore The start date of the certificate's validity period.
	NotBefore time.Time `json:"not_before"`

	// Percentage Lifetime of the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Serial The serial number of the x509 certificate.
	Serial string `json:"serial"`

	// Subject The subject of the certificate.
	Subject string `json:"subject"`
}

// X509CertificateStorage The storage configuration of a managed x509 certificate
type X509CertificateStorage struct {
	// CaFile The file that the ca will be written to
	CaFile string `json:"ca_file,omitempty"`

	// CertFile The file that the cert will be written to
	CertFile string `json:"cert_file,omitempty"`

	// KeyFile The file that the key will be written to
	KeyFile string `json:"key_file,omitempty"`
}

// X509ManagedCertificate Represents the configuration of a managed x509 certificate
type X509ManagedCertificate struct {
	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig `json:"certificate_config,omitempty"`

	// CertificateData Returns the x509 certificate data
	CertificateData *X509CertificateData     `json:"certificate_data,omitempty"`
	PostHooks       []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig   []X509CertificateStorage `json:"storage_config,omitempty"`
}

// X509ManagedCertificateList Returns a list of all the configured managed PKI certificate
type X509ManagedCertificateList struct {
	Data []X509ManagedCertificate `json:"data,omitempty"`
}

// BadRequest A generic HTTP problem
type BadRequest = Problem

// Forbidden A generic HTTP problem
type Forbidden = Problem

// InternalServerError A generic HTTP problem
type InternalServerError = Problem

// NotFound A generic HTTP problem
type NotFound = Problem

// NotImplemented A generic HTTP problem
type NotImplemented = Problem

// Unauthorized A generic HTTP problem
type Unauthorized = Problem

// CertsSshGetCertificatesParams defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParams struct {
	// Type Specifies whether to return cert of type user or host. See Vault documentation.
	Type *CertsSshGetCertificatesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// CertsSshGetCertificatesParamsType defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParamsType string

// CertsSshPostIssueRequestsParams defines parameters for CertsSshPostIssueRequests.
type CertsSshPostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// CertsX509PostIssueRequestsParams defines parameters for CertsX509PostIssueRequests.
type CertsX509PostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// K0sPostActionParams defines parameters for K0sPostAction.
type K0sPostActionParams struct {
	// Action Action to perform for the k0s service
	Action K0sPostActionParamsAction `form:"action" json:"action"`
}

// K0sPostActionParamsAction defines parameters for K0sPostAction.
type K0sPostActionParamsAction string

// LibvirtPostDomainActionParams defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParams struct {
	// Action Action to perform for the libvirt domain
	Action LibvirtPostDomainActionParamsAction `form:"action" json:"action"`
}

// LibvirtPostDomainActionParamsAction defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParamsAction string

// PowerPostActionParams defines parameters for PowerPostAction.
type PowerPostActionParams struct {
	// Action Action to perform for the machine
	Action PowerPostActionParamsAction `form:"action" json:"action"`
}

// PowerPostActionParamsAction defines parameters for PowerPostAction.
type PowerPostActionParamsAction string

// PowerConditionalRebootPostStatusParams defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParams struct {
	// Action Action to perform for the conditional-reboot service
	Action PowerConditionalRebootPostStatusParamsAction `form:"action" json:"action"`
}

// PowerConditionalRebootPostStatusParamsAction defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParamsAction string

// ReplicationPostSecretsRequestsParams defines parameters for ReplicationPostSecretsRequests.
type ReplicationPostSecretsRequestsParams struct {
	// SecretPath The KV2 path of the secret that you want to trigger the sync for
	SecretPath string `form:"secret-path" json:"secret-path"`
}

// ServicesUnitStatusPutParams defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParams struct {
	// Action Action to perform for the system service unit
	Action ServicesUnitStatusPutParamsAction `form:"action" json:"action"`
}

// ServicesUnitStatusPutParamsAction defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParamsAction string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns current configuration
	// (GET /v1/certs/acme)
	CertsAcmeGetCertificates(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/certs/acme/{id})
	CertsAcmeGetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Get the configuration of all managed ssh certificates
	// (GET /v1/certs/ssh)
	CertsSshGetCertificates(w http.ResponseWriter, r *http.Request, params CertsSshGetCertificatesParams)
	// Sign a SSH public key
	// (POST /v1/certs/ssh/issue-requests)
	CertsSshPostIssueRequests(w http.ResponseWriter, r *http.Request, params CertsSshPostIssueRequestsParams)
	// Get the configuration of a single managed ssh certificate
	// (GET /v1/certs/ssh/{id})
	CertsSshGetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Return configuration of all managed x509 certificates
	// (GET /v1/certs/x509)
	CertsX509GetCertificatesList(w http.ResponseWriter, r *http.Request)
	// Issues a X509 certificate
	// (POST /v1/certs/x509/issue-requests)
	CertsX509PostIssueRequests(w http.ResponseWriter, r *http.Request, params CertsX509PostIssueRequestsParams)
	// Returns info of configured managed x509 certificate
	// (GET /v1/certs/x509/{id})
	CertsX509GetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Returns all enabled components
	// (GET /v1/info/components)
	InfoGetComponents(w http.ResponseWriter, r *http.Request)
	// Start k0s
	// (POST /v1/k0s/actions)
	K0sPostAction(w http.ResponseWriter, r *http.Request, params K0sPostActionParams)
	// Set status of libvirt domain
	// (POST /v1/libvirt/domains/{domain})
	LibvirtPostDomainAction(w http.ResponseWriter, r *http.Request, domain string, params LibvirtPostDomainActionParams)
	// Lists installed packages
	// (GET /v1/packages/installed)
	PackagesInstalledGet(w http.ResponseWriter, r *http.Request)
	// Checks for updates
	// (GET /v1/packages/updates)
	PackagesUpdatesGet(w http.ResponseWriter, r *http.Request)
	// Upgrades all packages
	// (POST /v1/packages/upgrade-requests)
	PackagesUpgradeRequestsPost(w http.ResponseWriter, r *http.Request)
	// Directly interact with the power status of the system
	// (POST /v1/power-state)
	PowerPostAction(w http.ResponseWriter, r *http.Request, params PowerPostActionParams)
	// Unpause reboot status
	// (PUT /v1/power-state/conditional-reboot)
	PowerConditionalRebootPostStatus(w http.ResponseWriter, r *http.Request, params PowerConditionalRebootPostStatusParams)
	// Get reboot status
	// (GET /v1/power-state/conditional-reboot/status)
	PowerConditionalRebootGetStatus(w http.ResponseWriter, r *http.Request)
	// Returns current configuration
	// (GET /v1/replication/http/items)
	ReplicationGetHttpItemsList(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/replication/http/items/{id})
	ReplicationGetHttpItem(w http.ResponseWriter, r *http.Request, id string)
	// Returns current configuration
	// (GET /v1/replication/secrets/items)
	ReplicationGetSecretsItemsList(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/replication/secrets/items/{id})
	ReplicationGetSecretsItem(w http.ResponseWriter, r *http.Request, id string)
	// Replicate a secret from Vault
	// (POST /v1/replication/secrets/sync-requests)
	ReplicationPostSecretsRequests(w http.ResponseWriter, r *http.Request, params ReplicationPostSecretsRequestsParams)
	// Get logs of a system service unit
	// (GET /v1/services/{unit}/logs)
	ServicesUnitLogsGet(w http.ResponseWriter, r *http.Request, unit string)
	// Interact with a system service
	// (PUT /v1/services/{unit}/status)
	ServicesUnitStatusPut(w http.ResponseWriter, r *http.Request, unit string, params ServicesUnitStatusPutParams)
	// Send a WOL packet
	// (POST /v1/wol-message/{alias})
	WolPostMessage(w http.ResponseWriter, r *http.Request, alias string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CertsAcmeGetCertificates operation middleware
func (siw *ServerInterfaceWrapper) CertsAcmeGetCertificates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsAcmeGetCertificates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsAcmeGetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsAcmeGetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsAcmeGetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshGetCertificates operation middleware
func (siw *ServerInterfaceWrapper) CertsSshGetCertificates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsSshGetCertificatesParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshGetCertificates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshPostIssueRequests operation middleware
func (siw *ServerInterfaceWrapper) CertsSshPostIssueRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsSshPostIssueRequestsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "force-renewal" -------------

	err = runtime.BindQueryParameter("form", true, false, "force-renewal", r.URL.Query(), &params.ForceRenewal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force-renewal", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshPostIssueRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshGetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsSshGetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshGetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509GetCertificatesList operation middleware
func (siw *ServerInterfaceWrapper) CertsX509GetCertificatesList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509GetCertificatesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509PostIssueRequests operation middleware
func (siw *ServerInterfaceWrapper) CertsX509PostIssueRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsX509PostIssueRequestsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "force-renewal" -------------

	err = runtime.BindQueryParameter("form", true, false, "force-renewal", r.URL.Query(), &params.ForceRenewal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force-renewal", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509PostIssueRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509GetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsX509GetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509GetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InfoGetComponents operation middleware
func (siw *ServerInterfaceWrapper) InfoGetComponents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InfoGetComponents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// K0sPostAction operation middleware
func (siw *ServerInterfaceWrapper) K0sPostAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params K0sPostActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.K0sPostAction(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LibvirtPostDomainAction operation middleware
func (siw *ServerInterfaceWrapper) LibvirtPostDomainAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithOptions("simple", "domain", r.PathValue("domain"), &domain, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LibvirtPostDomainActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LibvirtPostDomainAction(w, r, domain, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesInstalledGet operation middleware
func (siw *ServerInterfaceWrapper) PackagesInstalledGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesInstalledGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesUpdatesGet operation middleware
func (siw *ServerInterfaceWrapper) PackagesUpdatesGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesUpdatesGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesUpgradeRequestsPost operation middleware
func (siw *ServerInterfaceWrapper) PackagesUpgradeRequestsPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesUpgradeRequestsPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerPostAction operation middleware
func (siw *ServerInterfaceWrapper) PowerPostAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PowerPostActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerPostAction(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerConditionalRebootPostStatus operation middleware
func (siw *ServerInterfaceWrapper) PowerConditionalRebootPostStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PowerConditionalRebootPostStatusParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerConditionalRebootPostStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerConditionalRebootGetStatus operation middleware
func (siw *ServerInterfaceWrapper) PowerConditionalRebootGetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerConditionalRebootGetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetHttpItemsList operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetHttpItemsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetHttpItemsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetHttpItem operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetHttpItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetHttpItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetSecretsItemsList operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetSecretsItemsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetSecretsItemsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetSecretsItem operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetSecretsItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetSecretsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationPostSecretsRequests operation middleware
func (siw *ServerInterfaceWrapper) ReplicationPostSecretsRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReplicationPostSecretsRequestsParams

	// ------------- Required query parameter "secret-path" -------------

	if paramValue := r.URL.Query().Get("secret-path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "secret-path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "secret-path", r.URL.Query(), &params.SecretPath)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret-path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationPostSecretsRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ServicesUnitLogsGet operation middleware
func (siw *ServerInterfaceWrapper) ServicesUnitLogsGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "unit" -------------
	var unit string

	err = runtime.BindStyledParameterWithOptions("simple", "unit", r.PathValue("unit"), &unit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "unit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServicesUnitLogsGet(w, r, unit)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ServicesUnitStatusPut operation middleware
func (siw *ServerInterfaceWrapper) ServicesUnitStatusPut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "unit" -------------
	var unit string

	err = runtime.BindStyledParameterWithOptions("simple", "unit", r.PathValue("unit"), &unit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "unit", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServicesUnitStatusPutParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServicesUnitStatusPut(w, r, unit, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WolPostMessage operation middleware
func (siw *ServerInterfaceWrapper) WolPostMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithOptions("simple", "alias", r.PathValue("alias"), &alias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alias", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WolPostMessage(w, r, alias)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/acme", wrapper.CertsAcmeGetCertificates)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/acme/{id}", wrapper.CertsAcmeGetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/ssh", wrapper.CertsSshGetCertificates)
	m.HandleFunc("POST "+options.BaseURL+"/v1/certs/ssh/issue-requests", wrapper.CertsSshPostIssueRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/ssh/{id}", wrapper.CertsSshGetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/x509", wrapper.CertsX509GetCertificatesList)
	m.HandleFunc("POST "+options.BaseURL+"/v1/certs/x509/issue-requests", wrapper.CertsX509PostIssueRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/x509/{id}", wrapper.CertsX509GetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/info/components", wrapper.InfoGetComponents)
	m.HandleFunc("POST "+options.BaseURL+"/v1/k0s/actions", wrapper.K0sPostAction)
	m.HandleFunc("POST "+options.BaseURL+"/v1/libvirt/domains/{domain}", wrapper.LibvirtPostDomainAction)
	m.HandleFunc("GET "+options.BaseURL+"/v1/packages/installed", wrapper.PackagesInstalledGet)
	m.HandleFunc("GET "+options.BaseURL+"/v1/packages/updates", wrapper.PackagesUpdatesGet)
	m.HandleFunc("POST "+options.BaseURL+"/v1/packages/upgrade-requests", wrapper.PackagesUpgradeRequestsPost)
	m.HandleFunc("POST "+options.BaseURL+"/v1/power-state", wrapper.PowerPostAction)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/power-state/conditional-reboot", wrapper.PowerConditionalRebootPostStatus)
	m.HandleFunc("GET "+options.BaseURL+"/v1/power-state/conditional-reboot/status", wrapper.PowerConditionalRebootGetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/http/items", wrapper.ReplicationGetHttpItemsList)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/http/items/{id}", wrapper.ReplicationGetHttpItem)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/secrets/items", wrapper.ReplicationGetSecretsItemsList)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/secrets/items/{id}", wrapper.ReplicationGetSecretsItem)
	m.HandleFunc("POST "+options.BaseURL+"/v1/replication/secrets/sync-requests", wrapper.ReplicationPostSecretsRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/services/{unit}/logs", wrapper.ServicesUnitLogsGet)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/services/{unit}/status", wrapper.ServicesUnitStatusPut)
	m.HandleFunc("POST "+options.BaseURL+"/v1/wol-message/{alias}", wrapper.WolPostMessage)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

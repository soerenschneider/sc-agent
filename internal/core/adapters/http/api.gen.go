//go:build go1.22

// Package http_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package http_server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ReplicationHttpItemStatus.
const (
	ReplicationHttpItemStatusFailed          ReplicationHttpItemStatus = "failed"
	ReplicationHttpItemStatusInvalidChecksum ReplicationHttpItemStatus = "invalid_checksum"
	ReplicationHttpItemStatusSynced          ReplicationHttpItemStatus = "synced"
	ReplicationHttpItemStatusUnknown         ReplicationHttpItemStatus = "unknown"
)

// Defines values for ReplicationSecretsItemStatus.
const (
	ReplicationSecretsItemStatusFailed  ReplicationSecretsItemStatus = "failed"
	ReplicationSecretsItemStatusSynced  ReplicationSecretsItemStatus = "synced"
	ReplicationSecretsItemStatusUnknown ReplicationSecretsItemStatus = "unknown"
)

// Defines values for CertsSshGetCertificatesParamsType.
const (
	Host CertsSshGetCertificatesParamsType = "host"
	User CertsSshGetCertificatesParamsType = "user"
)

// Defines values for K0sPostActionParamsAction.
const (
	K0sPostActionParamsActionStart K0sPostActionParamsAction = "start"
	K0sPostActionParamsActionStop  K0sPostActionParamsAction = "stop"
)

// Defines values for LibvirtPostDomainActionParamsAction.
const (
	LibvirtPostDomainActionParamsActionReboot   LibvirtPostDomainActionParamsAction = "reboot"
	LibvirtPostDomainActionParamsActionShutdown LibvirtPostDomainActionParamsAction = "shutdown"
	LibvirtPostDomainActionParamsActionStart    LibvirtPostDomainActionParamsAction = "start"
)

// Defines values for PowerPostActionParamsAction.
const (
	Reboot   PowerPostActionParamsAction = "reboot"
	Shutdown PowerPostActionParamsAction = "shutdown"
)

// Defines values for PowerConditionalRebootPostStatusParamsAction.
const (
	Pause   PowerConditionalRebootPostStatusParamsAction = "pause"
	Unpause PowerConditionalRebootPostStatusParamsAction = "unpause"
)

// Defines values for ServicesUnitStatusPutParamsAction.
const (
	Restart ServicesUnitStatusPutParamsAction = "restart"
	Start   ServicesUnitStatusPutParamsAction = "start"
	Stop    ServicesUnitStatusPutParamsAction = "stop"
)

// AcmeManagedCertificate The configuration of the managed ACME certificate
type AcmeManagedCertificate struct {
	// Certificate Returns the x509 certificate data
	Certificate *X509CertificateData `json:"certificate,omitempty"`

	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig   `json:"certificate_config,omitempty"`
	PostHooks         []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig     []X509CertificateStorage `json:"storage_config,omitempty"`
}

// AcmeManagedCertificateList The configuration of all configured managed ACME certificates
type AcmeManagedCertificateList struct {
	// Data The sync items
	Data []AcmeManagedCertificate `json:"data,omitempty"`
}

// InfoComponents Describes which components are enabled on the server
type InfoComponents struct {
	EnabledComponents []string `json:"enabled_components,omitempty"`
}

// PackageInfo Info about a single package
type PackageInfo struct {
	// Name Name of the package
	Name string `json:"name,omitempty"`

	// Repo Repository from which the package was installed
	Repo string `json:"repo,omitempty"`

	// Version Version of the package
	Version string `json:"version,omitempty"`
}

// PackageUpdates Returns whether system updates are available and which packages can be updated
type PackageUpdates struct {
	// UpdatablePackages List of packages that can be updated
	UpdatablePackages []PackageInfo `json:"updatable_packages,omitempty"`

	// UpdatesAvailable Indicates if there are updates available
	UpdatesAvailable bool `json:"updates_available,omitempty"`
}

// PackagesInstalled List of all the installed packages
type PackagesInstalled struct {
	// Packages List of installed packages
	Packages []PackageInfo `json:"packages,omitempty"`
}

// PkiIssuer Information about the certificate's issuer.
type PkiIssuer struct {
	// CommonName The common name of the issuer.
	CommonName string `json:"common_name"`

	// SerialNumber The serial number of the issuer.
	SerialNumber string `json:"serial_number"`
}

// PostHooks Hooks that are run after a cert has been issued
type PostHooks struct {
	// Cmd The command and its args that are run
	Cmd string `json:"cmd,omitempty"`

	// Name The name of the hook
	Name string `json:"name,omitempty"`
}

// Problem A generic HTTP problem
type Problem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code
	Status *int `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type
	Title *string `json:"title,omitempty"`

	// Type A URI reference that identifies the problem type
	Type *string `json:"type,omitempty"`
}

// ReplicationHttpItem Configuration and status of a single HTTP replication item
type ReplicationHttpItem struct {
	// DestUri destination path where the read secret should be writen to
	DestUri string `json:"dest_uri,omitempty"`

	// ExpectedChecksum only save the file if the checksum matches
	ExpectedChecksum *string `json:"expected_checksum,omitempty"`

	// Id id of the item
	Id        string      `json:"id,omitempty"`
	PostHooks []PostHooks `json:"post_hooks,omitempty"`

	// Source path of the secret to read and sync to the local filesystem
	Source string `json:"source,omitempty"`

	// Status the status of the synced secret
	Status ReplicationHttpItemStatus `json:"status,omitempty"`
}

// ReplicationHttpItemStatus the status of the synced secret
type ReplicationHttpItemStatus string

// ReplicationHttpItemsList All managed HTTP replication items
type ReplicationHttpItemsList struct {
	// Data The sync items
	Data []ReplicationHttpItem `json:"data,omitempty"`
}

// ReplicationSecretsItem Configuration and status of a single secret replication item
type ReplicationSecretsItem struct {
	// DestUri destination path where the read secret should be writen to
	DestUri string `json:"dest_uri,omitempty"`

	// Formatter name of the formatter
	Formatter string `json:"formatter,omitempty"`

	// Id id of the item
	Id string `json:"id,omitempty"`

	// SecretPath path of the secret to read and sync to the local filesystem
	SecretPath string `json:"secret_path,omitempty"`

	// Status the status of the synced secret
	Status *ReplicationSecretsItemStatus `json:"status,omitempty"`
}

// ReplicationSecretsItemStatus the status of the synced secret
type ReplicationSecretsItemStatus string

// ReplicationSecretsItemsList The configuration of all configured managed secrets replication items
type ReplicationSecretsItemsList struct {
	// Data The sync items
	Data []ReplicationSecretsItem `json:"data,omitempty"`
}

// ServiceLogs Represents log data. Each entry in the array represents a single line of data.
type ServiceLogs struct {
	Logs []string `json:"logs,omitempty"`
}

// ServiceLogsData Logs data for a service
type ServiceLogsData struct {
	// Data Represents log data. Each entry in the array represents a single line of data.
	Data  *ServiceLogs `json:"data,omitempty"`
	Error *string      `json:"error"`
}

// SshCertificateConfig Represents the configuration of a managed SSH certificate
type SshCertificateConfig struct {
	CertType string `json:"cert_type,omitempty"`

	// CertificateFile The file to write the signed cert to
	CertificateFile string `json:"certificate_file,omitempty"`

	// Id The id of this managed certificate
	Id         string   `json:"id,omitempty"`
	Principals []string `json:"principals,omitempty"`

	// PublicKeyFile The file to read the SSH public key from
	PublicKeyFile string `json:"public_key_file,omitempty"`

	// Role Name of the vault role
	Role string `json:"role,omitempty"`

	// Ttl The desired TTL of the signature
	Ttl string `json:"ttl,omitempty"`
}

// SshCertificateData The actual data of a SSH certificate
type SshCertificateData struct {
	// CriticalOptions A map of critical options associated with the certificate.
	CriticalOptions map[string]string `json:"critical_options,omitempty"`

	// Extensions A map of extensions associated with the certificate.
	Extensions map[string]string `json:"extensions,omitempty"`

	// Percentage Percentage associated with the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Principals List of principals associated with the certificate.
	Principals []string `json:"principals,omitempty"`

	// Serial The serial number of the SSH certificate.
	Serial int64 `json:"serial,omitempty"`

	// Type The type of the certificate.
	Type string `json:"type,omitempty"`

	// ValidAfter The time after which the certificate is valid.
	ValidAfter time.Time `json:"valid_after,omitempty"`

	// ValidBefore The time before which the certificate is valid.
	ValidBefore time.Time `json:"valid_before,omitempty"`
}

// SshCertificateStorage The storage configuration of a managed SSH certificate
type SshCertificateStorage struct {
	// CertificateFile The file that the certificate will be written to
	CertificateFile string `json:"certificate_file,omitempty"`

	// PublicKeyFile The file that contains the public key to be signed
	PublicKeyFile string `json:"public_key_file,omitempty"`
}

// SshManagedCertificate Represents the configuration and storage information of a managed SSH certificate
type SshManagedCertificate struct {
	// Certificate The actual data of a SSH certificate
	Certificate *SshCertificateData `json:"certificate,omitempty"`

	// CertificateConfig Represents the configuration of a managed SSH certificate
	CertificateConfig *SshCertificateConfig `json:"certificate_config,omitempty"`

	// StorageConfig The storage configuration of a managed SSH certificate
	StorageConfig *SshCertificateStorage `json:"storage_config,omitempty"`
}

// SshManagedCertificatesList Returns a list of all the configured managed SSH certificate
type SshManagedCertificatesList struct {
	Data []SshManagedCertificate `json:"data,omitempty"`
}

// X509CertificateConfig Returns the configuration of a managed x509 certificate
type X509CertificateConfig struct {
	// AltNames A list of alternative names (SANs) for the certificate
	AltNames []string `json:"alt_names,omitempty"`

	// CommonName The common name (CN) for the certificate
	CommonName string `json:"common_name,omitempty"`

	// Id Unique identifier for the certificate configuration
	Id string `json:"id,omitempty"`

	// IpSans A list of IP SANs for the certificate
	IpSans []string `json:"ip_sans,omitempty"`

	// Role The role associated with the certificate
	Role string `json:"role,omitempty"`

	// Ttl The time-to-live (TTL) duration for the certificate
	Ttl string `json:"ttl,omitempty"`
}

// X509CertificateData Returns the x509 certificate data
type X509CertificateData struct {
	// EmailAddresses A list of email addresses associated with the certificate.
	EmailAddresses []string `json:"email_addresses,omitempty"`

	// Issuer Information about the certificate's issuer.
	Issuer PkiIssuer `json:"issuer"`

	// NotAfter The end date of the certificate's validity period.
	NotAfter time.Time `json:"not_after"`

	// NotBefore The start date of the certificate's validity period.
	NotBefore time.Time `json:"not_before"`

	// Percentage Lifetime of the certificate.
	Percentage float32 `json:"percentage,omitempty"`

	// Serial The serial number of the x509 certificate.
	Serial string `json:"serial"`

	// Subject The subject of the certificate.
	Subject string `json:"subject"`
}

// X509CertificateStorage The storage configuration of a managed x509 certificate
type X509CertificateStorage struct {
	// CaFile The file that the ca will be written to
	CaFile string `json:"ca_file,omitempty"`

	// CertFile The file that the cert will be written to
	CertFile string `json:"cert_file,omitempty"`

	// KeyFile The file that the key will be written to
	KeyFile string `json:"key_file,omitempty"`
}

// X509ManagedCertificate Represents the configuration of a managed x509 certificate
type X509ManagedCertificate struct {
	// CertificateConfig Returns the configuration of a managed x509 certificate
	CertificateConfig *X509CertificateConfig `json:"certificate_config,omitempty"`

	// CertificateData Returns the x509 certificate data
	CertificateData *X509CertificateData     `json:"certificate_data,omitempty"`
	PostHooks       []PostHooks              `json:"post_hooks,omitempty"`
	StorageConfig   []X509CertificateStorage `json:"storage_config,omitempty"`
}

// X509ManagedCertificateList Returns a list of all the configured managed PKI certificate
type X509ManagedCertificateList struct {
	Data []X509ManagedCertificate `json:"data,omitempty"`
}

// BadRequest A generic HTTP problem
type BadRequest = Problem

// Forbidden A generic HTTP problem
type Forbidden = Problem

// InternalServerError A generic HTTP problem
type InternalServerError = Problem

// NotFound A generic HTTP problem
type NotFound = Problem

// NotImplemented A generic HTTP problem
type NotImplemented = Problem

// Unauthorized A generic HTTP problem
type Unauthorized = Problem

// CertsSshGetCertificatesParams defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParams struct {
	// Type Specifies whether to return cert of type user or host. See Vault documentation.
	Type *CertsSshGetCertificatesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// CertsSshGetCertificatesParamsType defines parameters for CertsSshGetCertificates.
type CertsSshGetCertificatesParamsType string

// CertsSshPostIssueRequestsParams defines parameters for CertsSshPostIssueRequests.
type CertsSshPostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// CertsX509PostIssueRequestsParams defines parameters for CertsX509PostIssueRequests.
type CertsX509PostIssueRequestsParams struct {
	// Id The id of the SSH host certificate you want to sign
	Id string `form:"id" json:"id"`

	// ForceRenewal Do not check the lifetime of the existing certificate against the threshold and force a new signature of the host key
	ForceRenewal *bool `form:"force-renewal,omitempty" json:"force-renewal,omitempty"`
}

// K0sPostActionParams defines parameters for K0sPostAction.
type K0sPostActionParams struct {
	// Action Action to perform for the k0s service
	Action K0sPostActionParamsAction `form:"action" json:"action"`
}

// K0sPostActionParamsAction defines parameters for K0sPostAction.
type K0sPostActionParamsAction string

// LibvirtPostDomainActionParams defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParams struct {
	// Action Action to perform for the libvirt domain
	Action LibvirtPostDomainActionParamsAction `form:"action" json:"action"`
}

// LibvirtPostDomainActionParamsAction defines parameters for LibvirtPostDomainAction.
type LibvirtPostDomainActionParamsAction string

// PowerPostActionParams defines parameters for PowerPostAction.
type PowerPostActionParams struct {
	// Action Action to perform for the machine
	Action PowerPostActionParamsAction `form:"action" json:"action"`
}

// PowerPostActionParamsAction defines parameters for PowerPostAction.
type PowerPostActionParamsAction string

// PowerConditionalRebootPostStatusParams defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParams struct {
	// Action Action to perform for the conditional-reboot service
	Action PowerConditionalRebootPostStatusParamsAction `form:"action" json:"action"`
}

// PowerConditionalRebootPostStatusParamsAction defines parameters for PowerConditionalRebootPostStatus.
type PowerConditionalRebootPostStatusParamsAction string

// ReplicationPostSecretsRequestsParams defines parameters for ReplicationPostSecretsRequests.
type ReplicationPostSecretsRequestsParams struct {
	// SecretPath The KV2 path of the secret that you want to trigger the sync for
	SecretPath string `form:"secret-path" json:"secret-path"`
}

// ServicesUnitStatusPutParams defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParams struct {
	// Action Action to perform for the system service unit
	Action ServicesUnitStatusPutParamsAction `form:"action" json:"action"`
}

// ServicesUnitStatusPutParamsAction defines parameters for ServicesUnitStatusPut.
type ServicesUnitStatusPutParamsAction string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns current configuration
	// (GET /v1/certs/acme)
	CertsAcmeGetCertificates(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/certs/acme/{id})
	CertsAcmeGetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Get the configuration of all managed ssh certificates
	// (GET /v1/certs/ssh)
	CertsSshGetCertificates(w http.ResponseWriter, r *http.Request, params CertsSshGetCertificatesParams)
	// Sign a SSH public key
	// (POST /v1/certs/ssh/issue-requests)
	CertsSshPostIssueRequests(w http.ResponseWriter, r *http.Request, params CertsSshPostIssueRequestsParams)
	// Get the configuration of a single managed ssh certificate
	// (GET /v1/certs/ssh/{id})
	CertsSshGetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Return configuration of all managed x509 certificates
	// (GET /v1/certs/x509)
	CertsX509GetCertificatesList(w http.ResponseWriter, r *http.Request)
	// Issues a X509 certificate
	// (POST /v1/certs/x509/issue-requests)
	CertsX509PostIssueRequests(w http.ResponseWriter, r *http.Request, params CertsX509PostIssueRequestsParams)
	// Returns info of configured managed x509 certificate
	// (GET /v1/certs/x509/{id})
	CertsX509GetCertificate(w http.ResponseWriter, r *http.Request, id string)
	// Returns all enabled components
	// (GET /v1/info/components)
	InfoGetComponents(w http.ResponseWriter, r *http.Request)
	// Start k0s
	// (POST /v1/k0s/actions)
	K0sPostAction(w http.ResponseWriter, r *http.Request, params K0sPostActionParams)
	// Set status of libvirt domain
	// (POST /v1/libvirt/domains/{domain})
	LibvirtPostDomainAction(w http.ResponseWriter, r *http.Request, domain string, params LibvirtPostDomainActionParams)
	// Lists installed packages
	// (GET /v1/packages/installed)
	PackagesInstalledGet(w http.ResponseWriter, r *http.Request)
	// Checks for updates
	// (GET /v1/packages/updates)
	PackagesUpdatesGet(w http.ResponseWriter, r *http.Request)
	// Upgrades all packages
	// (POST /v1/packages/upgrade-requests)
	PackagesUpgradeRequestsPost(w http.ResponseWriter, r *http.Request)
	// Directly interact with the power status of the system
	// (POST /v1/power-state)
	PowerPostAction(w http.ResponseWriter, r *http.Request, params PowerPostActionParams)
	// Unpause reboot status
	// (PUT /v1/power-state/conditional-reboot)
	PowerConditionalRebootPostStatus(w http.ResponseWriter, r *http.Request, params PowerConditionalRebootPostStatusParams)
	// Get reboot status
	// (GET /v1/power-state/conditional-reboot/status)
	PowerConditionalRebootGetStatus(w http.ResponseWriter, r *http.Request)
	// Returns current configuration
	// (GET /v1/replication/http/items)
	ReplicationGetHttpItemsList(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/replication/http/items/{id})
	ReplicationGetHttpItem(w http.ResponseWriter, r *http.Request, id string)
	// Returns current configuration
	// (GET /v1/replication/secrets/items)
	ReplicationGetSecretsItemsList(w http.ResponseWriter, r *http.Request)
	// Returns the replication status of a single item
	// (GET /v1/replication/secrets/items/{id})
	ReplicationGetSecretsItem(w http.ResponseWriter, r *http.Request, id string)
	// Replicate a secret from Vault
	// (POST /v1/replication/secrets/sync-requests)
	ReplicationPostSecretsRequests(w http.ResponseWriter, r *http.Request, params ReplicationPostSecretsRequestsParams)
	// Get logs of a system service unit
	// (GET /v1/services/{unit}/logs)
	ServicesUnitLogsGet(w http.ResponseWriter, r *http.Request, unit string)
	// Interact with a system service
	// (PUT /v1/services/{unit}/status)
	ServicesUnitStatusPut(w http.ResponseWriter, r *http.Request, unit string, params ServicesUnitStatusPutParams)
	// Send a WOL packet
	// (POST /v1/wol-message/{alias})
	WolPostMessage(w http.ResponseWriter, r *http.Request, alias string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CertsAcmeGetCertificates operation middleware
func (siw *ServerInterfaceWrapper) CertsAcmeGetCertificates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsAcmeGetCertificates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsAcmeGetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsAcmeGetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsAcmeGetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshGetCertificates operation middleware
func (siw *ServerInterfaceWrapper) CertsSshGetCertificates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsSshGetCertificatesParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshGetCertificates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshPostIssueRequests operation middleware
func (siw *ServerInterfaceWrapper) CertsSshPostIssueRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsSshPostIssueRequestsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "force-renewal" -------------

	err = runtime.BindQueryParameter("form", true, false, "force-renewal", r.URL.Query(), &params.ForceRenewal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force-renewal", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshPostIssueRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsSshGetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsSshGetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsSshGetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509GetCertificatesList operation middleware
func (siw *ServerInterfaceWrapper) CertsX509GetCertificatesList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509GetCertificatesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509PostIssueRequests operation middleware
func (siw *ServerInterfaceWrapper) CertsX509PostIssueRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CertsX509PostIssueRequestsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "force-renewal" -------------

	err = runtime.BindQueryParameter("form", true, false, "force-renewal", r.URL.Query(), &params.ForceRenewal)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force-renewal", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509PostIssueRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CertsX509GetCertificate operation middleware
func (siw *ServerInterfaceWrapper) CertsX509GetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CertsX509GetCertificate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InfoGetComponents operation middleware
func (siw *ServerInterfaceWrapper) InfoGetComponents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InfoGetComponents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// K0sPostAction operation middleware
func (siw *ServerInterfaceWrapper) K0sPostAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params K0sPostActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.K0sPostAction(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LibvirtPostDomainAction operation middleware
func (siw *ServerInterfaceWrapper) LibvirtPostDomainAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithOptions("simple", "domain", r.PathValue("domain"), &domain, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "domain", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LibvirtPostDomainActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LibvirtPostDomainAction(w, r, domain, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesInstalledGet operation middleware
func (siw *ServerInterfaceWrapper) PackagesInstalledGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesInstalledGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesUpdatesGet operation middleware
func (siw *ServerInterfaceWrapper) PackagesUpdatesGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesUpdatesGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesUpgradeRequestsPost operation middleware
func (siw *ServerInterfaceWrapper) PackagesUpgradeRequestsPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesUpgradeRequestsPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerPostAction operation middleware
func (siw *ServerInterfaceWrapper) PowerPostAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PowerPostActionParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerPostAction(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerConditionalRebootPostStatus operation middleware
func (siw *ServerInterfaceWrapper) PowerConditionalRebootPostStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PowerConditionalRebootPostStatusParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerConditionalRebootPostStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PowerConditionalRebootGetStatus operation middleware
func (siw *ServerInterfaceWrapper) PowerConditionalRebootGetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PowerConditionalRebootGetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetHttpItemsList operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetHttpItemsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetHttpItemsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetHttpItem operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetHttpItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetHttpItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetSecretsItemsList operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetSecretsItemsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetSecretsItemsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationGetSecretsItem operation middleware
func (siw *ServerInterfaceWrapper) ReplicationGetSecretsItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationGetSecretsItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplicationPostSecretsRequests operation middleware
func (siw *ServerInterfaceWrapper) ReplicationPostSecretsRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReplicationPostSecretsRequestsParams

	// ------------- Required query parameter "secret-path" -------------

	if paramValue := r.URL.Query().Get("secret-path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "secret-path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "secret-path", r.URL.Query(), &params.SecretPath)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret-path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplicationPostSecretsRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ServicesUnitLogsGet operation middleware
func (siw *ServerInterfaceWrapper) ServicesUnitLogsGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "unit" -------------
	var unit string

	err = runtime.BindStyledParameterWithOptions("simple", "unit", r.PathValue("unit"), &unit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "unit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServicesUnitLogsGet(w, r, unit)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ServicesUnitStatusPut operation middleware
func (siw *ServerInterfaceWrapper) ServicesUnitStatusPut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "unit" -------------
	var unit string

	err = runtime.BindStyledParameterWithOptions("simple", "unit", r.PathValue("unit"), &unit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "unit", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServicesUnitStatusPutParams

	// ------------- Required query parameter "action" -------------

	if paramValue := r.URL.Query().Get("action"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "action"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServicesUnitStatusPut(w, r, unit, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WolPostMessage operation middleware
func (siw *ServerInterfaceWrapper) WolPostMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithOptions("simple", "alias", r.PathValue("alias"), &alias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alias", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WolPostMessage(w, r, alias)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/acme", wrapper.CertsAcmeGetCertificates)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/acme/{id}", wrapper.CertsAcmeGetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/ssh", wrapper.CertsSshGetCertificates)
	m.HandleFunc("POST "+options.BaseURL+"/v1/certs/ssh/issue-requests", wrapper.CertsSshPostIssueRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/ssh/{id}", wrapper.CertsSshGetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/x509", wrapper.CertsX509GetCertificatesList)
	m.HandleFunc("POST "+options.BaseURL+"/v1/certs/x509/issue-requests", wrapper.CertsX509PostIssueRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/certs/x509/{id}", wrapper.CertsX509GetCertificate)
	m.HandleFunc("GET "+options.BaseURL+"/v1/info/components", wrapper.InfoGetComponents)
	m.HandleFunc("POST "+options.BaseURL+"/v1/k0s/actions", wrapper.K0sPostAction)
	m.HandleFunc("POST "+options.BaseURL+"/v1/libvirt/domains/{domain}", wrapper.LibvirtPostDomainAction)
	m.HandleFunc("GET "+options.BaseURL+"/v1/packages/installed", wrapper.PackagesInstalledGet)
	m.HandleFunc("GET "+options.BaseURL+"/v1/packages/updates", wrapper.PackagesUpdatesGet)
	m.HandleFunc("POST "+options.BaseURL+"/v1/packages/upgrade-requests", wrapper.PackagesUpgradeRequestsPost)
	m.HandleFunc("POST "+options.BaseURL+"/v1/power-state", wrapper.PowerPostAction)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/power-state/conditional-reboot", wrapper.PowerConditionalRebootPostStatus)
	m.HandleFunc("GET "+options.BaseURL+"/v1/power-state/conditional-reboot/status", wrapper.PowerConditionalRebootGetStatus)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/http/items", wrapper.ReplicationGetHttpItemsList)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/http/items/{id}", wrapper.ReplicationGetHttpItem)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/secrets/items", wrapper.ReplicationGetSecretsItemsList)
	m.HandleFunc("GET "+options.BaseURL+"/v1/replication/secrets/items/{id}", wrapper.ReplicationGetSecretsItem)
	m.HandleFunc("POST "+options.BaseURL+"/v1/replication/secrets/sync-requests", wrapper.ReplicationPostSecretsRequests)
	m.HandleFunc("GET "+options.BaseURL+"/v1/services/{unit}/logs", wrapper.ServicesUnitLogsGet)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/services/{unit}/status", wrapper.ServicesUnitStatusPut)
	m.HandleFunc("POST "+options.BaseURL+"/v1/wol-message/{alias}", wrapper.WolPostMessage)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PJwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
